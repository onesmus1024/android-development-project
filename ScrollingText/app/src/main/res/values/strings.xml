<resources>
    <string name="app_name">Scrolling Text</string>
    <string name="article_title">python programming</string>
    <string name="article_subtitle">socket programming</string>
    <string name="article_text"><b>I’m only going to talk about <i>INET (i.e. IPv4)</i>sockets</b>,\n but they account for at least 99% of the sockets in use. And I’ll
only talk about STREAM (i.e. TCP) sockets - unless you really know what you’re doing (in which case this HOWTO
isn’t for you!), you’ll get better behavior and performance from a STREAM socket than anything else. I will try to
clear up the mystery of what a socket is, as well as some hints on how to work with blocking and non-blocking sockets.
But I’ll start by talking about blocking sockets. You’ll need to know how they work before dealing with non-blocking
sockets.
        \n
        onescode.cf\n
Part of the trouble with understanding these things can mean a number of subtly different things,
depending on context. So first, let’s make a distinction between a “client” socket - an endpoint of a conversation, and
a “server” socket, which is more like a switchboard operator. The client application (your browser, for example) uses
“client” sockets exclusively; the web server it’s talking to uses both “server” sockets and “client” sockets.
    I’m only going to talk about INET (i.e. IPv4) sockets, but they account for at least 99% of the sockets in use. And I’ll
only talk about STREAM (i.e. TCP) sockets - unless you really know what you’re doing (in which case this HOWTO
isn’t for you!), you’ll get better behavior and performance from a STREAM socket than anything else. I will try to
clear up the mystery of what a socket is, as well as some hints on how to work with blocking and non-blocking sockets.
But I’ll start by talking about blocking sockets. You’ll need to know how they work before dealing with non-blocking
sockets.
Part of the trouble with understanding these things is that “socket” can mean a number of subtly different things,
depending on context. So first, let’s make a distinction between a “client” socket - an endpoint of a conversation, and
a “server” socket, which is more like a switchboard operator. The client application (your browser, for example) uses
“client” sockets exclusively; the web server it’s talking to uses both “server” sockets and “client” sockets.</string>
</resources>